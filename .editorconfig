; EditorConfig to support per-solution formatting.
; Use the EditorConfig VS add-in to make this work.
; http://editorconfig.org/

; This is the default for the codeline.
root = true

[*]
indent_style = space
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = true

[*.{xml,config,*proj,nuspec,props,resx,targets,yml,tasks}]
indent_size = 2

[*.json]
indent_size = 2

[*.{ps1,psm1}]
indent_size = 4

[*.sh]
indent_size = 4
end_of_line = lf

[*.{cmd, bat}]
end_of_line = crlf

# C++ Files
[*.{cpp,h,in}]
curly_bracket_next_line = true
indent_brace_style = Allman

###############################
# .NET Coding Conventions     #
###############################

# You can modify the rules from these initially generated values to suit your own policies
# You can learn more about editorconfig here: https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference
[*.{cs,vb}]
# Organize usings
dotnet_sort_system_directives_first = true

#Formatting - indentation options

#indent switch case contents.
csharp_indent_case_contents = true
#indent switch labels
csharp_indent_switch_labels = true

#Formatting - new line options

#place catch statements on a new line
csharp_new_line_before_catch = true
#place else statements on a new line
csharp_new_line_before_else = true
#require finally statements to be on a new line after the closing brace
csharp_new_line_before_finally = true
#require braces to be on a new line for accessors, properties, types, lambdas, methods, control_blocks, and object_collection (also known as "Allman" style)
csharp_new_line_before_open_brace = accessors, properties, types, lambdas, methods, control_blocks, object_collection

#Formatting - organize using options

#do not place System.* using directives before other using directives
dotnet_sort_system_directives_first = true

# this. preferences
#prefer fields not to be prefaced with this. or Me.
dotnet_style_qualification_for_field = false:suggestion
#prefer properties not to be prefaced with this. or Me.
dotnet_style_qualification_for_property = false:suggestion
#prefer methods not to be prefaced with this. or Me.
dotnet_style_qualification_for_method = false:suggestion
#prefer events not to be prefaced with this. or Me.
dotnet_style_qualification_for_event = false:suggestion

# Language keywords vs BCL types preferences
#prefer the language keyword for local variables, method parameters, and class members, instead of the type name, for types that have a keyword to represent them
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
#prefer the language keyword for member access expressions, instead of the type name, for types that have a keyword to represent them
dotnet_style_predefined_type_for_member_access = true:suggestion

# Parentheses preferences
#prefer parentheses to clarify arithmetic operator (*, /, %, +, -, <<, >>, &, ^, |) precedence
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:silent
#prefer parentheses to clarify relational operator (>, <, <=, >=, is, as, ==, !=) precedence
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:silent
#prefer parentheses to clarify other binary operator (&&, ||, ??) precedence
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:silent
#prefer to not have parentheses when operator precedence is obvious
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:silent

# Modifier preferences
#Prefer accessibility modifiers to be declared except for public interface members
dotnet_style_require_accessibility_modifiers = for_non_interface_members:none
#prefer that fields should be marked with readonly (C#) or ReadOnly (Visual Basic) if they are only ever assigned inline, or inside of a constructor
dotnet_style_readonly_field = true:suggestion

# Expression-level preferences
#prefer objects to be initialized using object initializers when possible
dotnet_style_object_initializer = true:suggestion
#prefer collections to be initialized using collection initializers when possible
dotnet_style_collection_initializer = true:suggestion
#prefer tuple names to ItemX properties
dotnet_style_explicit_tuple_names = true:suggestion
#prefer null coalescing expressions to ternary operator checking
dotnet_style_coalesce_expression = true:warning
#prefer inferred tuple element names
dotnet_style_prefer_inferred_tuple_names = true:suggestion
#prefer inferred anonymous type member names
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
#prefer autoproperties over properties with private backing fields
dotnet_style_prefer_auto_properties = true:warning
#prefer to use null-conditional operator when possible
dotnet_style_null_propagation = true:warning
#prefer using a null check with pattern-matching over object.ReferenceEquals
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion
#prefer assignments with a ternary conditional over an if-else statement
dotnet_style_prefer_conditional_expression_over_assignment = true:warning
#prefer return statements to use a ternary conditional over an if-else statement
dotnet_style_prefer_conditional_expression_over_return = true:warning

###############################
# Naming Conventions          #
###############################

# Style Definitions
dotnet_naming_style.pascal_case_style.capitalization             = pascal_case

# Use PascalCase for constant fields
dotnet_naming_rule.constant_fields_should_be_pascal_case.severity = warning
dotnet_naming_rule.constant_fields_should_be_pascal_case.symbols  = constant_fields
dotnet_naming_rule.constant_fields_should_be_pascal_case.style    = pascal_case_style
dotnet_naming_symbols.constant_fields.applicable_kinds            = field
dotnet_naming_symbols.constant_fields.applicable_accessibilities  = *
dotnet_naming_symbols.constant_fields.required_modifiers          = const

###############################
# C# Code Style Rules         #
###############################

[*.cs]
# var preferences
#prefer var is used to declare variables with built-in system types such as int
csharp_style_var_for_built_in_types = true:warning
#prefer var when the type is already mentioned on the right-hand side of a declaration expression
csharp_style_var_when_type_is_apparent = true:warning
#prefer explicit type over var in all cases, unless overridden by another code style rule
csharp_style_var_elsewhere = false:warning

# Expression-bodied members
#Prefer block bodies for methods
csharp_style_expression_bodied_methods = when_on_single_line:suggestion
#Prefer block bodies for constructors
csharp_style_expression_bodied_constructors = when_on_single_line:suggestion
#Prefer expression-bodied members for operators when they will be a single line
csharp_style_expression_bodied_operators = when_on_single_line:suggestion
#Prefer expression-bodied members for properties when they will be a single line
csharp_style_expression_bodied_properties = when_on_single_line:suggestion
#Prefer expression-bodied members for indexers when they will be a single line
csharp_style_expression_bodied_indexers = when_on_single_line:suggestion
#Prefer expression-bodied members for accessors when they will be a single line
csharp_style_expression_bodied_accessors = when_on_single_line:suggestion

# Pattern-matching preferences
#prefer pattern matching instead of is expressions with type casts
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
#prefer pattern matching instead of as expressions with null checks to determine if something is of a particular type
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion

# Null-checking preferences
#prefer to use throw expressions instead of throw statements
csharp_style_throw_expression = true:suggestion
#prefer to use the conditional coalescing operator (?.) when invoking a lambda expression, instead of performing a null check
csharp_style_conditional_delegate_call = true:warning

# Modifier preferences
#prefer the specified modifiers order
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:suggestion

# Expression-level preferences
#prefer curly braces even for one line of code
csharp_prefer_braces = true:none
#do not prefer deconstruction in variable declarations
csharp_style_deconstructed_variable_declaration = false:suggestion
#prefer default over default(T)
csharp_prefer_simple_default_expression = true:suggestion
#prefer local functions over anonymous functions
csharp_style_pattern_local_over_anonymous_function = true:warning
#prefer out variables to be declared inline in the argument list of a method call when possible
csharp_style_inlined_variable_declaration = true:suggestion

###############################
# C# Formatting Rules         #
###############################

# New line preferences
#Require braces to be on a new line for all expressions ("Allman" style)
csharp_new_line_before_open_brace = all
#place else statements on a new line
csharp_new_line_before_else = true
#place catch statements on a new line
csharp_new_line_before_catch = true
#require finally statements to be on a new line after the closing brace
csharp_new_line_before_finally = true
#require members of object initializers to be on separate lines
csharp_new_line_before_members_in_object_initializers = true
#require members of anonymous types to be on separate lines
csharp_new_line_before_members_in_anonymous_types = true
#require elements of query expression clauses to be on separate lines
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
#indent switch case contents
csharp_indent_case_contents = true
#indent switch labels
csharp_indent_switch_labels = true
#Labels are placed at the leftmost column
csharp_indent_labels = flush_left

# Space preferences
#require no space between the cast and the value
csharp_space_after_cast = false
#require no space after a keyword in a control flow statement such as a for loop
csharp_space_after_keywords_in_control_flow_statements = false
#do not place space characters after the opening parenthesis and before the closing parenthesis of a method call
csharp_space_between_method_call_parameter_list_parentheses = false
#do not place space characters after the opening parenthesis and before the closing parenthesis of a method declaration parameter list
csharp_space_between_method_declaration_parameter_list_parentheses = false
#do not place space between parentheses for control flow statement, expressions and type casts
csharp_space_between_parentheses = false
#require a space before the colon for bases or interfaces in a type declaration
csharp_space_before_colon_in_inheritance_clause = true
#require a space after the colon for bases or interfaces in a type declaration
csharp_space_after_colon_in_inheritance_clause = true
#Insert space before and after the binary operator
csharp_space_around_binary_operators = before_and_after
#remove space within empty parameter list parentheses for a method declaration
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
#remove space between method call name and opening parenthesis
csharp_space_between_method_call_name_and_opening_parenthesis = false
#remove space within empty argument list parentheses
csharp_space_between_method_call_empty_parameter_list_parentheses = false

# Wrapping preferences
#leave statements and member declarations on different lines
csharp_preserve_single_line_statements = false
#leave code block on single line
csharp_preserve_single_line_blocks = true

##################################
# Visual Basic Code Style Rules  #
##################################

[*.vb]
# Modifier preferences
##prefer the specified modifiers order
visual_basic_preferred_modifier_order = Partial,Default,Private,Protected,Public,Friend,NotOverridable,Overridable,MustOverride,Overloads,Overrides,MustInherit,NotInheritable,Static,Shared,Shadows,ReadOnly,WriteOnly,Dim,Const,WithEvents,Widening,Narrowing,Custom,Async:suggestion
